Principles of Analytic Graphics

P1: show comparisons:
  evidence for a hypothesis is always relative to another competing hypothesis.
  always ask "compared to what?""
  
P2: show causality, mechanism, explanation, systematic structure
  what is our causal framework for thinking about a question
  

P3: show multivariate data
  multivariate = more than 2 variables
  the real world is multivariate
  need to "escape flatland"

example: Simpson's Paradox(each seaon the relationship  is positive bt overall the relationshi appears negative)

P4: integration of evidence
  completely integrate words, numbers, images, diagrams
  data graphics should make ause of many modes of data presentation
  don't let the tool drive the analysis
  
P5:   describe and document the evidence with appropriate labels, scales, sources, etc.
  a data graphic should tell a complete story that is credible
  
P6: content is king
  analytical presentations ultimately stand or fall depending on the quality, relevance, and integrity of their content.
  

Exploratory graphs include first 4 items below:
understand data properties/find patterns in data/suggest modeling strategies/debug asnalysis/communicate results

they are made quickly, 
a large number are made,
the goal is for personal understanding
axes/legends are generally cleaned up(later)
color/size are primarily used for information

simple summaries of data: 
    one dimension data: 
            five-number summary
            boxplots
            histograms
            density plot
            barplot

Two dimensions
    multiple/overlayed 1-D plots(Lattice/ggplot2)
    scatterplots
    smooth scatterplots
    
    
more than 2 dimensions
    Overlayed/multiple 2-D plots; coplots
    use color, size, shape to add dimensions
    spinning plots
    actual 3-D plots(not that useful)
 
 
Summary:
    Exploratory plots are quick and dirty
    let you summarize the data(usually graphicall) and highly any broad  features
    explore basic questions and hypotheses(and perhaps rule them out)
    suggest modeling strategies for the next step



3 PLOTTING sYSTEM
    The Base plotting system: 
        Artist's palette model, 
        start with blank canvas and build up from there
        starting with plot function(or similar)
        use annotation functions to add/modify(test, lines, points, axis)

        It is convenient, but can't go back once plot has started and need to plan in advance; difficult to "translate" to others plot, and it made by R command
        
    The Lattice System
        plots are created with a single functioon call(xyplot, bwplot, etc.)
        most useful for (coplot) conditioning types of plots: looking at how y changes with x across levels of z
        things like margings/spacing set automatically because entier plot is specified at once
        good for putting many plots on a screen
        
        
    ggplot2 system
        Splits the difference between base and lattice in a number of ways.
        Automatically deals with spacings, text, titles, but also allows you to annotate by "adding" to a plot
        superficial  similarity to lattice but generally easier/more intuitive to use
        default mode makes many choices for you(but you can still customize)
    
    
The plotting System:
    the core plotting and graphics engine in R is encapsulated in following packages:
        graphics: base graphing systems, including plot, hist, boxplot, ...
        grDevices: all the code implementing the various graphics devices, like X11, PDF, PostScript, PNG, ...
    The lattice plotting system is implemented with following packages:
        lattice: cdoe fore producing Trellis graphics, which independent of  base graphcis, including xyplot, bwplot, levelplot
        grid: independent of the base system, we seldom call direct from grid package, lattice package builds on top of grid
        
    Some important Base Graphics Parameters
        pch: the plotting sysbol(default is open circle. if the value is a #, referred to a table for predefinedshape, or character, like "a", then use that character as sysbol)
        lty: line type( default is solid line)
        lwd: line width( integer)
        col: the plotting color(a number, string, or hex code, function colors() give a vector of colors by name)
        xlab/ylab: character string for x-axis/y-axis
        
        par() used to specify global graphcis parameters affecting all plots in R session, these parameters can be overridden with speficied arguments to specific plotting functions:
        las: the orientation of axis labels
        bg: background color
        mar: margin size
        oma: the outer margin size(default is 0)
        mfrow: # of plots per row, column(plot filled row-wise)
        mfcol: # of plots per row, column(plots are filled column-wise)
        par("lty")
        
Base plot functions:
    plot:
    lines:
    points:
    text:
    title:
    mtext:
    axis: 


    
        
    
    
    the most common graphics for a plot to be "send" is screen device,
    on Mac, the screen device is launched with quartz(), on WIndows, it's windows(), on Unix/Linux, it's x11()
    ?Devices to show device list
    
    To use a graphics device, 4 steps:
    1 Launch a graphics device
    2 call a plot function to make a plot,
    3 annotate the plot
    4 explicitly close the graphics device with dev.off()
    
    pdf(file="myplot.pdf")
    with(faithful, plot(eruptions, waiting))
    title(main="old Faithful Geyser data")
    dev.off() or plot.new() to reset()
    if multi graphics opened,  dev.cur() to lis tthe currently active device, every open device is assigned a # >2
    use dev.set(3) to activate the corresponding device
    dev.copy: copy a plot from one device to another
    dev.copy2pdf: copy a plot to pdf
    
    
    vector formats devices:
    pdf
    svg: scalable vector graphics, support animation
    win.metafile
    postscript
    
    Bitmap formats devices:
    png: good for line drawings or images with solid colors
    jpeg: good for photo or natural scenes, food for plotting many many points
    tiff: support lossless compression
    bmp:
    
    library(swirl)
    install_from_swirl("Exploratory Data Analysis")
    
    
    